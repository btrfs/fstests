#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2017 Liu Bo.  All Rights Reserved.
#
# FS QA Test 140
#
# Regression test for btrfs DIO read's repair during read.
#
# Commit 2dabb3248453 ("Btrfs: Direct I/O read: Work on sectorsized blocks")
# introduced the regression.
# The upstream fix is
#	commit 2e949b0a5592 ("Btrfs: fix invalid dereference in btrfs_retry_endio")
#
. ./common/preamble
_begin_fstest auto quick read_repair fiemap

. ./common/filter

_supported_fs btrfs
_require_scratch_dev_pool 2
# No data checksums for NOCOW case, so can't detect corruption and repair data.
_require_btrfs_no_nodatacow
_require_btrfs_command inspect-internal dump-tree
_require_odirect
# Overwriting data is forbidden on a zoned block device
_require_non_zoned_device "${SCRATCH_DEV}"

get_physical()
{
	local logical=$1
	local stripe=$2
	$BTRFS_UTIL_PROG inspect-internal dump-tree -t 3 $SCRATCH_DEV | \
		grep $logical -A 6 | \
		$AWK_PROG "(\$1 ~ /stripe/ && \$3 ~ /devid/ && \$2 ~ /$stripe/) { print \$6 }"
}

get_devid()
{
	local logical=$1
	local stripe=$2
	$BTRFS_UTIL_PROG inspect-internal dump-tree -t 3 $SCRATCH_DEV | \
		grep $logical -A 6 | \
		$AWK_PROG "(\$1 ~ /stripe/ && \$3 ~ /devid/ && \$2 ~ /$stripe/) { print \$4 }"
}

get_device_path()
{
	local devid=$1
	echo "$SCRATCH_DEV_POOL" | $AWK_PROG "{print \$$devid}"
}

_scratch_dev_pool_get 2
# step 1, create a raid1 btrfs which contains one 128k file.
echo "step 1......mkfs.btrfs" >>$seqres.full

mkfs_opts="-d raid1 -b 1G"
_scratch_pool_mkfs $mkfs_opts >>$seqres.full 2>&1

# make sure data is written to the start position of the data chunk
_scratch_mount $(_btrfs_no_v1_cache_opt)

$XFS_IO_PROG -f -d -c "pwrite -S 0xaa -b 128K 0 128K" "$SCRATCH_MNT/foobar" |\
	_filter_xfs_io_offset

# step 2, corrupt the first 64k of one copy (on SCRATCH_DEV which is the first
# one in $SCRATCH_DEV_POOL
echo "step 2......corrupt file extent" >>$seqres.full

${FILEFRAG_PROG} -v $SCRATCH_MNT/foobar >> $seqres.full
logical_in_btrfs=$(_btrfs_get_first_logical $SCRATCH_MNT/foobar)
physical=$(get_physical ${logical_in_btrfs} 1)
devid=$(get_devid ${logical_in_btrfs} 1)
devpath=$(get_device_path ${devid})

_scratch_unmount

# Grab the contents of the the area so we can compare to the final part
orig=$(mktemp)
$XFS_IO_PROG -d -c "pread -v -b 512 $physical 512" $devpath |\
	 _filter_xfs_io_offset > $orig
origcsum=$(_md5_checksum $orig)
rm -f $orig

echo " corrupt stripe #1, devid $devid devpath $devpath physical $physical" \
	>> $seqres.full
$XFS_IO_PROG -d -c "pwrite -S 0xbb -b 64K $physical 64K" $devpath > /dev/null

_scratch_mount

# step 3, 128k dio read (this read can repair bad copy)
echo "step 3......repair the bad copy" >>$seqres.full

_btrfs_direct_read_on_mirror 1 2 "$SCRATCH_MNT/foobar" 0 128K

_scratch_unmount

# check if the repair works
final=$(mktemp)
$XFS_IO_PROG -d -c "pread -v -b 512 $physical 512" $devpath |\
	_filter_xfs_io_offset > $final
finalcsum=$(_md5_checksum $final)
rm -f $final

_scratch_dev_pool_put

[ "$origcsum" == "$finalcsum" ] || _fail "repair failed, csums don't match"

# success, all done
status=0
exit
