#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2010 IBM Corporation. All Rights Reserved.
#
# FS QA Test No. 228
#
# Check if fallocate respects RLIMIT_FSIZE
#
. ./common/preamble
_begin_fstest rw auto prealloc quick

# generic, but xfs_io's fallocate must work
# only Linux supports fallocate
_require_test

[ -n "$XFS_IO_PROG" ] || _notrun "xfs_io executable not found"

# Sanity check to see if fallocate works
_require_xfs_io_command "falloc"

# Check if we have good enough space available
avail=`df -P $TEST_DIR | awk 'END {print $4}'`
[ "$avail" -ge 104000 ] || _notrun "Test device is too small ($avail KiB)"

# Set the FSIZE ulimit to 100MB and check
ulimit -f 102400
flim=`ulimit -f`
[ "$flim" != "unlimited" ] || _notrun "Unable to set FSIZE ulimit"
[ "$flim" -eq 102400 ] || _notrun "FSIZE ulimit is not correct (100 MB)"

echo "File size limit is now set to 100 MB."
echo "Let us try to preallocate 101 MB. This should fail."
# xfs_io will receive SIGXFSZ signal, if not handled it will trigger a coredump.
#
# And in bash 5.3.x, bash will always output the command/script triggering the
# coredump.
# Work around the new behavior by ignoring the signal.
# Falloc will still fail but with a more reliable error message.
bash -c "trap '' SIGXFSZ; $XFS_IO_PROG -f -c 'falloc 0 101m' $TEST_DIR/ouch"
rm -f $TEST_DIR/ouch

echo "Let us now try to preallocate 50 MB. This should succeed."
$XFS_IO_PROG -f -c 'falloc 0 50m' $TEST_DIR/ouch
rm -f $TEST_DIR/ouch

echo "Test over."
# success, all done
status=0
exit
